# Define the images to be used
images:
  airflow:
    repository: apache/airflow
    tag: 2.9.2
    pullPolicy: IfNotPresent

# Set the Airflow webserver default username and password
web:
  defaultUser:
    enabled: true
    username: admin
    password: admin
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 10
  startupProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 10
    failureThreshold: 10

# Configure the Airflow database
database:
  type: postgresql
  postgresql:
    enabled: true
    postgresqlDatabase: airflow
    postgresqlUsername: postgres
    postgresqlPassword: postgres

# Set the executor to CeleryExecutor
executor: CeleryExecutor

# Configure the Redis instance for Celery backend
redis:
  enabled: true

# Set the Airflow fernet key for encryption
fernetKey: "0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a"

# Configure Airflow persistence for logs and DAGs
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi

# Set Airflow service type (ClusterIP, NodePort, LoadBalancer)
service:
  type: ClusterIP
  port: 8080

# Airflow config
airflow:
  config:
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags

# DAGs volume configuration
dags:
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
